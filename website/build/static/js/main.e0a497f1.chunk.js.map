{"version":3,"sources":["App.js","serviceWorker.js","index.js","gremlin-neptune.png"],"names":["currentS3path","window","location","hostname","console","log","apigateway","fetch","then","response","status","json","data","APIPATH","catch","err","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","graphoutput","traversal","showOutput","getGraphOutput","bind","assertThisInitialized","handleSubmit","actorName","request","XMLHttpRequest","self","requestURL","open","onload","JSON","parse","setState","send","event","newTraversal","target","movieInput","value","preventDefault","react_default","a","createElement","className","src","logo","alt","onSubmit","TextField_default","id","label","style","margin","width","placeholder","helperText","InputLabelProps","shrink","Button_default","variant","size","color","type","Paper_default","align","main_default","Component","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e0a497f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './gremlin-neptune.png';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport ReactJson from 'react-json-view';\nimport './App.css';\n\n\n/*\nfunction async_get(url, callback) {\n  var xmlhttp = new XMLHttpRequest();\n  xmlhttp.onreadystatechange = function() {\n      if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\n          console.log('responseText:' + xmlhttp.responseText);\n          try {\n              var data = JSON.parse(xmlhttp.responseText);\n          } catch(err) {\n              console.log(err.message + \" in \" + xmlhttp.responseText);\n              return;\n          }\n          callback(data);\n      }\n  };\n  xmlhttp.open(\"GET\", url, true);\n  xmlhttp.send();\n} //end function async_get\n\nvar currentS3path = window.location.hostname\nconsole.log(currentS3path)\nvar url = \"https://\" + currentS3path + \"/api.json\"\n//var url = \"https://s3.eu-central-1.amazonaws.com/neptunewsdtr/api.json\"\nconsole.log(url)\n\nvar apiResponse = \"\"\nasync_get(url, function(response) {\n  apiResponse = JSON.parse(response.responseText);\n});\n\nconsole.log(apiResponse);\n*/\n\nvar currentS3path = window.location.hostname;\nconsole.log(currentS3path);\nvar url = \"http://\" + currentS3path + \"/api.json\";\n\nvar apigateway = \"\";\n\nfetch(url)\n  .then(\n    function(response) {\n      if (response.status !== 200) {\n        console.log('Looks like there was a problem. Status Code: ' +\n          response.status);\n        return;\n      }\n\n      // Examine the text in the response\n      response.json().then(function(data) {\n        apigateway = data.APIPATH;\n        console.log(data);\n      });\n    }\n  )\n  .catch(function(err) {\n    console.log('Fetch Error :-S', err);\n  });\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      name: \"\",\n      graphoutput: \"{}\",\n      traversal: \"\",\n      showOutput: false\n     };\n    \n    this.getGraphOutput = this.getGraphOutput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  } //end constructor\n\n  getGraphOutput(actorName) {\n    var request = new XMLHttpRequest();\n    var self = this;\n    console.log(\"Inside React: \" + apigateway)\n    var requestURL = apigateway + \"/actor/?actor=\" + actorName\n  \n    request.open('GET', requestURL , true);\n    request.onload = function () {\n  \n      // Begin accessing JSON data here\n      var data = JSON.parse(this.response);\n  \n      if (request.status >= 200 && request.status < 400) {\n        self.setState({\n          graphoutput: data,\n          showOutput: true\n        });\n      } else {\n        return \"ERROR\";\n      }\n    }\n  \n    request.send();\n  } //getGraphOutput\n\n  handleSubmit(event) {\n    var newTraversal = \"g.V().has('name','\" + event.target.movieInput.value + \"').repeat(out().in().simplePath())\" +\n      \".until(has('name','Kevin Bacon')).path().by('name').by('title').limit(10)\"\n    this.getGraphOutput( event.target.movieInput.value );\n    this.setState({\n      name: event.target.movieInput.value,\n      traversal: newTraversal\n    })\n    console.log(event.target.movieInput.value)\n    event.preventDefault();\n  } //end handleSubmit\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Welcome to AWS re:Invent 2018 Workshop: <br/>\n            DAT310 - Building Your First Graph Application Using Amazon Neptune\n          </p>\n        </header>\n        <br/>\n        <form onSubmit={this.handleSubmit}>\n          <TextField\n            id=\"movieInput\"\n            label=\"Find the Six Degrees of Kevin Bacon:\"\n            style={{ margin: 8, width: 600 }}\n            placeholder=\"<Insert Actor/Actress Name Here>\"\n            helperText=\"Ex: Jack Nicholson\"\n            margin=\"normal\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n          /><br/>\n          <Button variant=\"contained\" size=\"medium\" color=\"primary\" type=\"submit\">\n            Go!\n          </Button>\n        </form><br/><br/>\n        <Paper className=\"graph-output\">\n            <h3 align=\"left\">Graph Traversal:</h3>\n            <p align=\"left\">\n              <span id=\"graph-traversal\">{this.state.traversal}</span>\n            </p>\n        </Paper>\n        <br/>\n        <Paper className=\"graph-output\">\n            <h3 align=\"left\">Graph Traversal Output:</h3>\n            <div align=\"left\">\n              { this.state.showOutput ? <ReactJson src={this.state.graphoutput} /> : null }\n            </div>\n        </Paper>\n        <br/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/gremlin-neptune.255e7226.png\";"],"sourceRoot":""}
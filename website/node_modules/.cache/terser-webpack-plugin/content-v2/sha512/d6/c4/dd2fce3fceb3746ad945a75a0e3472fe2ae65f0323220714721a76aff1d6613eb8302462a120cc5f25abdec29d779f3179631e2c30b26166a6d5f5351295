{"map":"{\"version\":3,\"sources\":[\"/Users/triggan/Documents/Code/neptune-workshop-ui/website/src/App.js\",\"/Users/triggan/Documents/Code/neptune-workshop-ui/website/src/serviceWorker.js\",\"/Users/triggan/Documents/Code/neptune-workshop-ui/website/src/index.js\",\"/Users/triggan/Documents/Code/neptune-workshop-ui/website/node_modules/url-loader/dist/cjs.js??ref--6-oneOf-0!/Users/triggan/Documents/Code/neptune-workshop-ui/website/src/gremlin-neptune.png\"],\"names\":[\"apiGw\",\"XMLHttpRequest\",\"currentS3path\",\"window\",\"location\",\"hostname\",\"console\",\"log\",\"url\",\"open\",\"setRequestHeader\",\"send\",\"apiResponse\",\"JSON\",\"parse\",\"responseText\",\"App\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"name\",\"graphoutput\",\"traversal\",\"showOutput\",\"getGraphOutput\",\"bind\",\"assertThisInitialized\",\"handleSubmit\",\"actorName\",\"request\",\"self\",\"requestURL\",\"APIPATH\",\"onload\",\"data\",\"response\",\"status\",\"setState\",\"event\",\"newTraversal\",\"target\",\"movieInput\",\"value\",\"preventDefault\",\"react_default\",\"a\",\"createElement\",\"className\",\"src\",\"logo\",\"alt\",\"onSubmit\",\"TextField_default\",\"id\",\"label\",\"style\",\"margin\",\"width\",\"placeholder\",\"helperText\",\"InputLabelProps\",\"shrink\",\"Button_default\",\"variant\",\"size\",\"color\",\"type\",\"Paper_default\",\"align\",\"main_default\",\"Component\",\"Boolean\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\",\"module\",\"exports\",\"__webpack_require__\",\"p\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport logo from './gremlin-neptune.png';\\nimport TextField from '@material-ui/core/TextField';\\nimport Button from '@material-ui/core/Button';\\nimport Paper from '@material-ui/core/Paper';\\nimport ReactJson from 'react-json-view';\\nimport './App.css';\\n\\nvar apiGw = new XMLHttpRequest();\\nvar currentS3path = window.location.hostname\\nconsole.log(currentS3path)\\n//var url = \\\"https://\\\" + currentS3path + \\\"/api.json\\\"\\nvar url = \\\"https://s3.eu-central-1.amazonaws.com/neptunewsdtr/api.json\\\"\\nconsole.log(url)\\napiGw.open(\\\"GET\\\", url, false);\\napiGw.setRequestHeader(\\\"Content-type\\\", \\\"application/json\\\");\\napiGw.send();\\nvar apiResponse = JSON.parse(apiGw.responseText);\\nconsole.log(apiResponse);\\n\\nclass App extends Component {\\n\\n  constructor(props) {\\n    super(props);\\n    this.state = { \\n      name: \\\"\\\",\\n      graphoutput: \\\"{}\\\",\\n      traversal: \\\"\\\",\\n      showOutput: false\\n     };\\n    \\n    this.getGraphOutput = this.getGraphOutput.bind(this);\\n    this.handleSubmit = this.handleSubmit.bind(this);\\n  } //end constructor\\n\\n  getGraphOutput(actorName) {\\n    var request = new XMLHttpRequest();\\n    var self = this;\\n  \\n    var requestURL = apiResponse.APIPATH + \\\"/actor/?actor=\\\" + actorName\\n  \\n    request.open('GET', requestURL , true);\\n    request.onload = function () {\\n  \\n      // Begin accessing JSON data here\\n      var data = JSON.parse(this.response);\\n  \\n      if (request.status >= 200 && request.status < 400) {\\n        self.setState({\\n          graphoutput: data,\\n          showOutput: true\\n        });\\n      } else {\\n        return \\\"ERROR\\\";\\n      }\\n    }\\n  \\n    request.send();\\n  } //getGraphOutput\\n\\n  handleSubmit(event) {\\n    var newTraversal = \\\"g.V().has('name','\\\" + event.target.movieInput.value + \\\"').repeat(out().in().simplePath())\\\" +\\n      \\\".until(has('name','Kevin Bacon')).path().by('name').by('title').limit(10)\\\"\\n    this.getGraphOutput( event.target.movieInput.value );\\n    this.setState({\\n      name: event.target.movieInput.value,\\n      traversal: newTraversal\\n    })\\n    console.log(event.target.movieInput.value)\\n    event.preventDefault();\\n  } //end handleSubmit\\n\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <header className=\\\"App-header\\\">\\n          <img src={logo} className=\\\"App-logo\\\" alt=\\\"logo\\\" />\\n          <p>\\n            Welcome to AWS re:Invent 2018 Workshop: <br/>\\n            DAT310 - Building Your First Graph Application Using Amazon Neptune\\n          </p>\\n        </header>\\n        <br/>\\n        <form onSubmit={this.handleSubmit}>\\n          <TextField\\n            id=\\\"movieInput\\\"\\n            label=\\\"Find the Six Degrees of Kevin Bacon:\\\"\\n            style={{ margin: 8, width: 600 }}\\n            placeholder=\\\"<Insert Actor/Actress Name Here>\\\"\\n            helperText=\\\"Ex: Jack Nicholson\\\"\\n            margin=\\\"normal\\\"\\n            InputLabelProps={{\\n              shrink: true,\\n            }}\\n          /><br/>\\n          <Button variant=\\\"contained\\\" size=\\\"medium\\\" color=\\\"primary\\\" type=\\\"submit\\\">\\n            Go!\\n          </Button>\\n        </form><br/><br/>\\n        <Paper className=\\\"graph-output\\\">\\n            <h3 align=\\\"left\\\">Graph Traversal:</h3>\\n            <p align=\\\"left\\\">\\n              <span id=\\\"graph-traversal\\\">{this.state.traversal}</span>\\n            </p>\\n        </Paper>\\n        <br/>\\n        <Paper className=\\\"graph-output\\\">\\n            <h3 align=\\\"left\\\">Graph Traversal Output:</h3>\\n            <div align=\\\"left\\\">\\n              { this.state.showOutput ? <ReactJson src={this.state.graphoutput} /> : null }\\n            </div>\\n        </Paper>\\n        <br/>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\",\"module.exports = __webpack_public_path__ + \\\"static/media/gremlin-neptune.255e7226.png\\\";\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{247:function(e,t,a){\"use strict\";a.r(t);var n=a(1),r=a.n(n),l=a(14),o=a.n(l),s=(a(92),a(77)),i=a(78),u=a(86),c=a(79),p=a(85),m=a(17),h=a(80),g=a.n(h),v=a(82),d=a.n(v),b=a(84),E=a.n(b),w=a(33),f=a.n(w),O=a(81),j=a.n(O),y=(a(94),new XMLHttpRequest),A=window.location.hostname;console.log(A);var S=\"https://s3.eu-central-1.amazonaws.com/neptunewsdtr/api.json\";console.log(S),y.open(\"GET\",S,!1),y.setRequestHeader(\"Content-type\",\"application/json\"),y.send();var k=JSON.parse(y.responseText);console.log(k);var G=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(u.a)(this,Object(c.a)(t).call(this,e))).state={name:\"\",graphoutput:\"{}\",traversal:\"\",showOutput:!1},a.getGraphOutput=a.getGraphOutput.bind(Object(m.a)(Object(m.a)(a))),a.handleSubmit=a.handleSubmit.bind(Object(m.a)(Object(m.a)(a))),a}return Object(p.a)(t,e),Object(i.a)(t,[{key:\"getGraphOutput\",value:function(e){var t=new XMLHttpRequest,a=this,n=k.APIPATH+\"/actor/?actor=\"+e;t.open(\"GET\",n,!0),t.onload=function(){var e=JSON.parse(this.response);if(!(t.status>=200&&t.status<400))return\"ERROR\";a.setState({graphoutput:e,showOutput:!0})},t.send()}},{key:\"handleSubmit\",value:function(e){var t=\"g.V().has('name','\"+e.target.movieInput.value+\"').repeat(out().in().simplePath()).until(has('name','Kevin Bacon')).path().by('name').by('title').limit(10)\";this.getGraphOutput(e.target.movieInput.value),this.setState({name:e.target.movieInput.value,traversal:t}),console.log(e.target.movieInput.value),e.preventDefault()}},{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"App\"},r.a.createElement(\"header\",{className:\"App-header\"},r.a.createElement(\"img\",{src:g.a,className:\"App-logo\",alt:\"logo\"}),r.a.createElement(\"p\",null,\"Welcome to AWS re:Invent 2018 Workshop: \",r.a.createElement(\"br\",null),\"DAT310 - Building Your First Graph Application Using Amazon Neptune\")),r.a.createElement(\"br\",null),r.a.createElement(\"form\",{onSubmit:this.handleSubmit},r.a.createElement(d.a,{id:\"movieInput\",label:\"Find the Six Degrees of Kevin Bacon:\",style:{margin:8,width:600},placeholder:\"<Insert Actor/Actress Name Here>\",helperText:\"Ex: Jack Nicholson\",margin:\"normal\",InputLabelProps:{shrink:!0}}),r.a.createElement(\"br\",null),r.a.createElement(E.a,{variant:\"contained\",size:\"medium\",color:\"primary\",type:\"submit\"},\"Go!\")),r.a.createElement(\"br\",null),r.a.createElement(\"br\",null),r.a.createElement(f.a,{className:\"graph-output\"},r.a.createElement(\"h3\",{align:\"left\"},\"Graph Traversal:\"),r.a.createElement(\"p\",{align:\"left\"},r.a.createElement(\"span\",{id:\"graph-traversal\"},this.state.traversal))),r.a.createElement(\"br\",null),r.a.createElement(f.a,{className:\"graph-output\"},r.a.createElement(\"h3\",{align:\"left\"},\"Graph Traversal Output:\"),r.a.createElement(\"div\",{align:\"left\"},this.state.showOutput?r.a.createElement(j.a,{src:this.state.graphoutput}):null)),r.a.createElement(\"br\",null))}}]),t}(n.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(r.a.createElement(G,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},80:function(e,t,a){e.exports=a.p+\"static/media/gremlin-neptune.255e7226.png\"},87:function(e,t,a){e.exports=a(247)},92:function(e,t,a){},94:function(e,t,a){}},[[87,2,1]]]);","extractedComments":[]}